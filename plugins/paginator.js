// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(env, callback) {

    /* Paginator plugin. Defaults can be overridden in config.json
        e.g. "paginator": {"perPage": 10}
     */
    var PaginatorPage, defaults, getArticles, key, options, value;
    defaults = {
      template: 'index.jade',
      articles: 'articles',
      first: 'index.html',
      filename: 'page/%d/index.html',
      perPage: 2
    };
    options = env.config.paginator || {};
    for (key in defaults) {
      value = defaults[key];
      if (options[key] == null) {
        options[key] = defaults[key];
      }
    }
    getArticles = function(contents, category) {
      var articles;
      articles = contents[options.articles]._.directories.map(function(item) {
        return item.index;
      });
      articles = articles.filter(function(item) {
        return item.template !== 'none';
      });

      if(category) {
        articles = articles.filter(function(item) {
	  if(item.metadata)
	    return item.metadata.category == category;
          else {
            console.log(item.filepath.relative)
            return false
          }
        });
      }

      articles.sort(function(a, b) {
        return b.date - a.date;
      });
      return articles;
    };
    PaginatorPage = (function(superClass) {
      extend(PaginatorPage, superClass);


      /* A page has a number and a list of articles */

      function PaginatorPage(pageNum, articles1, category) {
        this.pageNum = pageNum;
        this.articles = articles1;
        this.category = category
      }

      PaginatorPage.prototype.getFilename = function() {
        if (this.pageNum === 1) {
          var result = (this.category ? this.category : '') + '/' + options.first;
        } else {
          var result = (this.category ? this.category : '') + '/' + options.filename.replace('%d', this.pageNum);
        }
        return result
      };

      PaginatorPage.prototype.getView = function() {
        return function(env, locals, contents, templates, callback) {
          var ctx, template;
          template = templates[options.template];
          if (template == null) {
            return callback(new Error("unknown paginator template '" + options.template + "'"));
          }
          ctx = {
            articles: this.articles,
            pageNum: this.pageNum,
            prevPage: this.prevPage,
            nextPage: this.nextPage,
            category: this.category
          };
          env.utils.extend(ctx, locals);
          return template.render(ctx, callback);
        };
      };

      return PaginatorPage;

    })(env.plugins.Page);
    env.registerGenerator('paginator', function(contents, callback) {
      var articles, i, j, k, l, len, len1, numPages, page, pageArticles, pages, ref, rv;
      rv = {
        pages: {}
      };
      [null, 'basteln', 'brandings', 'filzen', 'malen', 'nÃ¤hen', 'wolle'].forEach(function(category) {
        articles = getArticles(contents, category);
        if(articles.length > 0) {
          if(category)
            rv[category] = { pages: {} }

          numPages = Math.ceil(articles.length / options.perPage);
          pages = [];
          for (i = j = 0, ref = numPages; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            pageArticles = articles.slice(i * options.perPage, (i + 1) * options.perPage);
            pages.push(new PaginatorPage(i + 1, pageArticles, category));
          }
          for (i = k = 0, len = pages.length; k < len; i = ++k) {
            page = pages[i];
            page.prevPage = pages[i - 1];
            page.nextPage = pages[i + 1];
          }

          for (l = 0, len1 = pages.length; l < len1; l++) {
            page = pages[l];
            if(category)
              rv[category].pages[page.pageNum + ".page"] = page;
            else
              rv.pages[page.pageNum + ".page"] = page;
          }
          if(category) {
            rv[category]['index.page'] = pages[0];
            rv[category]['last.page'] = pages[numPages - 1];
          }
          else {
            rv['index.page'] = pages[0];
            rv['last.page'] = pages[numPages - 1];
          }
        }
      })
      return callback(null, rv);
    });
    env.helpers.getArticles = getArticles;
    return callback();
  };

}).call(this);
